'''Data Loading, Storage and File Formats
Problem Statement: Analyzing Sales Data from Multiple File Formats
Dataset: Sales data in multiple file formats (e.g., CSV, Excel, JSON)
Description: The goal is to load and analyze sales data from different file formats, including
CSV, Excel, and JSON, and perform data cleaning, transformation, and analysis on the
dataset.
Tasks to Perform:
Obtain sales data files in various formats, such as CSV, Excel, and JSON.
1. Load the sales data from each file format into the appropriate data structures or
dataframes.
2. Explore the structure and content of the loaded data, identifying any inconsistencies,
missing values, or data quality issues.
3. Perform data cleaning operations, such as handling missing values, removing
duplicates, or correcting inconsistencies.
4. Convert the data into a unified format, such as a common dataframe or data structure,
to enable seamless analysis.
5. Perform data transformation tasks, such as merging multiple datasets, splitting
columns, or deriving new variables.
6. Analyze the sales data by performing descriptive statistics, aggregating data by
specific variables, or calculating metrics such as total sales, average order value, or
product category distribution.
7. Create visualizations, such as bar plots, pie charts, or box plots, to represent the sales
data and gain insights into sales trends, customer behavior, or product performance.'''

import pandas as pd
import numpy as np

#Load the sales data from each file format into the appropriate data structures or dataframes
df = pd.read_csv("1_sample.csv")

print(df)

print("Data Structure:")
print(df.head())

# Basic Information
print("\nBasic Information:")
print(df.info())

print("\nMissing Values:")
print(df.isnull().sum())

df['Sales'] = df['Sales'].fillna(0)
df['Sales'] = df['Sales'].astype(int)

df['Channel'] = df['Channel'].fillna('Not known').str.lower()

print(df)

df['Channel'] = df['Channel'].replace(['offline', 'online'], [0, 1])

print(df)

import pandas as pd

df_file1 = pd.read_csv('1_file1.csv')
df_file2 = pd.read_csv('1_file2.csv')

# Split start_date column into 'Year', 'Month', and 'Day' columns for file1_7
df_file1[['Year', 'Month', 'Day']] = df_file1['start_date'].str.split('-', expand=True)

# Split start_date column into 'Year', 'Month', and 'Day' columns for file2_7
df_file2[['Year', 'Month', 'Day']] = df_file2['start_date'].str.split('-', expand=True)

print("Transformed DataFrame for file1:")
print(df_file1)

print("\nTransformed DataFrame for file2:")
print(df_file2)

import pandas as pd

# Read data from CSV files
df_file1 = pd.read_csv('1_file1.csv')
df_file2 = pd.read_csv('1_file2.csv')

# Merge datasets based on 'id' column
merged_df = pd.concat([df_file1, df_file2], ignore_index=True)

# Display the merged DataFrame
print("Merged DataFrame:")
print(merged_df)

import pandas as pd

# Read data from CSV file
sales_data = pd.read_csv('1_sample.csv')
# Display basic descriptive statistics
print("Descriptive Statistics:")
print(sales_data.describe())

# Calculate total sales
total_sales = sales_data['Sales'].sum()
print("\nTotal Sales:", total_sales)

# Calculate average order value
average_order_value = sales_data['Sales'].mean()
print("Average Order Value:", average_order_value)

# Calculate product category distribution
product_category_distribution = sales_data['P Type'].value_counts(normalize=True)
print("\nProduct Category Distribution:")
print(product_category_distribution)

import pandas as pd
import matplotlib.pyplot as plt

# Read data from CSV file
sales_data = pd.read_csv('1_sample.csv')

# Bar plot: Total Sales by Product Type
plt.figure(figsize=(10, 6))
product_type_sales = sales_data.groupby('P Type')['Sales'].sum()
product_type_sales.plot(kind='bar', color='skyblue')
plt.title('Total Sales by Product Type')
plt.xlabel('Product Type')
plt.ylabel('Total Sales')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Pie chart: Product Category Distribution
plt.figure(figsize=(8, 8))
product_category_distribution = sales_data['P Type'].value_counts()
plt.pie(product_category_distribution, labels=product_category_distribution.index, autopct='%1.1f%%', startangle=140)
plt.title('Product Category Distribution')
plt.axis('equal')
plt.tight_layout()
plt.show()
